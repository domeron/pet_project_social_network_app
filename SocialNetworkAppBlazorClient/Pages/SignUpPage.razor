@page "/signup"

<h3>SignUpPage</h3>

<EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
    @if (!String.IsNullOrEmpty(_errorMessage))
    {
        <div>
            <p>@_errorMessage</p>
        </div>  
    }

    <div class="form-field">
        <label>Username:</label>
        <InputText @bind-Value="Model!.UserName"/>
        <ValidationMessage For="@(() => Model.UserName)"/>
    </div>

    <div class="form-field">
        <label>E-mail:</label>
        <InputText @bind-Value="Model!.Email" />
        <ValidationMessage For="@(() => Model.Email)" />
    </div>

    <div class="form-field">
        <label>Password:</label>
        <InputText @bind-Value="Model!.Password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>

    <div class="form-field">
        <button type="submit">
            Sign Up
        </button>
    </div>

    <p>Already have an account? <a href="/signin">Sign In here</a></p>
</EditForm>

@inject IAuthenticationService _authenticationService
@inject NavigationManager _navigationManager

@code {
    private EditContext? _editContext;
    private SignUpDTO? Model;
    private string _errorMessage;

    protected override void OnInitialized()
    {
        Model ??= new();
        _editContext = new(Model);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await _authenticationService.SignUp(Model!);
            _navigationManager.NavigateTo("/signin");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}
