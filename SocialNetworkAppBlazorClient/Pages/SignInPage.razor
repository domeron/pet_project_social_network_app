@page "/signin"
@layout AuthenticationLayout


<div class="form-wrapper">
    
    <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit"
        class="form">
        <DataAnnotationsValidator/>
        <span class="form-title">Sign In</span>
        @if (!String.IsNullOrEmpty(_errorMessage))
        {
            <div class="error-wrapper">
                <span>@_errorMessage</span>
            </div>    
        }

        <div class="form-field">
            <label>Email:</label>
            <InputText @bind-Value="Model!.Email" 
                class="input-text"/>
            <div class="validation-message">
                <ValidationMessage For="@(() => Model.Email)"/>
            </div>
        </div>
        <div class="form-field">
            <label>Password:</label>
            <InputText @bind-Value="Model!.Password" type="password"
                class="input-text"/>
            <div class="validation-message">
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
        </div>

        <div class="form-field button-field">
            <button type="submit">
                Submit</button>
        </div>

        <span>Don't have an account? <a href="/signup">Sign Up Here</a></span>
    </EditForm>
</div>

@inject IAuthenticationService _authenticationService
@inject NavigationManager _navigationManager;

@code {
    private EditContext? _editContext;
    private SignInDTO? Model;
    private string _errorMessage;

    protected override void OnInitialized()
    {
        Model ??= new();
        _editContext = new(Model);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await _authenticationService.SignIn(Model.Email, Model.Password);
            _navigationManager.NavigateTo("/");
        } catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}
